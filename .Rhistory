ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
xlim(1,12)
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
xlim(0,12)
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
xlim(1,12)
scale_x_continuous()
?scale_x_continuous
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12))
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12)) +
coord_radial()
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12)) +
coord_radial()
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12)) +
coord_radial()
?geom_line
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
geom_line(aes(linewidth = status))+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12)) +
coord_radial()
df
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
geom_line(aes(linewidth = status))+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12))
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
# geom_line(aes(linewidth = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12)) +
coord_radial()
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12))
?scale_x_continuous
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
# geom_line(aes(linewidth = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12), n.breaks = 12) +
coord_radial()
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
# geom_line(aes(linewidth = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12), n.breaks = 12)
ggplot(data = df,
aes(x = month,
y = 1,
color = plant,
fill = plant)) +
geom_point(aes(shape = status))+
# geom_line(aes(linewidth = status))+
geom_line()+
scale_shape_manual(name = "Plant status", values = c(indoor = 20, outdoor = 16)) +
scale_x_continuous(limits = c(1,12), n.breaks = 12) +
coord_radial()
data()
print("Hello world!")
view(orange)
library(tidyverse)
view(orange)
data$orange
library(datasets)
view(orange)
test <- as.data.frame("....XXMAS.
.SAMXMS...
...S..A...
..A.A.MS.X
XMASAMX.MM
X.....XA.A
S.S.S.S.SS
.A.A.A.A.A
..M.M.M.MM
.X.X.XMASX")
test
test_str <- "....XXMAS.
.SAMXMS...
...S..A...
..A.A.MS.X
XMASAMX.MM
X.....XA.A
S.S.S.S.SS
.A.A.A.A.A
..M.M.M.MM
.X.X.XMASX")
test_str <- "....XXMAS.
.SAMXMS...
...S..A...
..A.A.MS.X
XMASAMX.MM
X.....XA.A
S.S.S.S.SS
.A.A.A.A.A
..M.M.M.MM
.X.X.XMASX"
test_str
?scan
test_matrix <- matrix(test_str, ncol = length(test_str[1]) - 2, byrow = T)
test_str[1]
length(test_str[1])
test_matrix <- matrix(test_str, ncol = 9, byrow = T)
test_matrix
test_str_split <- strsplit(test_str, "\n")
test_str_split
test_str_split <- strsplit(test_str, "\n") %>%
unlist()
# Working directory
source_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(source_path))
# Directories
input_dir = ".//inputs//"
output_dir = ".//outputs//"
# Libraries
library(tidyverse)
library(readxl)
# Define functions
`%notin%` = function(x,y) {!(x %in% y)}
test_str_split <- strsplit(test_str, "\n") %>%
unlist()
test_str_split
test_str_split[1]
str_length(test_str_split[1])
test_matrix <- matrix(test_str_split, ncol = str_length(test_str_split[1]), byrow = T)
test_matrix
?str_replace_all
test_str_split <- strsplit(test_str, "\n") %>%
unlist() %>%
str_replace_all(" ", "")
test_str <- "....XXMAS.
.SAMXMS...
...S..A...
..A.A.MS.X
XMASAMX.MM
X.....XA.A
S.S.S.S.SS
.A.A.A.A.A
..M.M.M.MM
.X.X.XMASX"
test_str_split <- strsplit(test_str, "\n") %>%
unlist() %>%
str_replace_all(" ", "") #drop witespace
test_matrix <- matrix(test_str_split, ncol = str_length(test_str_split[1]), byrow = T)
test_matrix
test_str <- "MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX"
# test_str <- "....XXMAS.
#              .SAMXMS...
#              ...S..A...
#              ..A.A.MS.X
#              XMASAMX.MM
#              X.....XA.A
#              S.S.S.S.SS
#              .A.A.A.A.A
#              ..M.M.M.MM
#              .X.X.XMASX"
test_str_split <- strsplit(test_str, "\n") %>%
unlist() %>%
str_replace_all(" ", "") #drop witespace
test_matrix <- matrix(test_str_split, ncol = str_length(test_str_split[1]), byrow = T)
test_matrix
t(test_matrix)
test_str_split <- strsplit(test_str, "\n") %>%
unlist() %>%
str_replace_all(" ", "") #drop whitespace
test_str_spliy
test_str_split
test_matrix
?str_split_fixed
str_split_1(test_str_split)
str_split_1(test_str_split[1])
str_split_1(test_str_split[1],"")
for (i in 1:length(test_str_split)){
row <- str_split_1(test_str_split[1],"")
print(row)
}
for (i in 1:length(test_str_split)){
row <- str_split_1(test_str_split[i],"")
print(row)
}
search_matrix <- matrix(ncol = ncol = str_length(input_str_split[1]))
search_matrix <- matrix(ncol = str_length(input_str_split[1]))
input_str_split <- strsplit(input_str, "\n") %>%
unlist() %>%
str_replace_all(" ", "") #drop whitespace
input_str <- "MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX"
input_str_split <- strsplit(input_str, "\n") %>%
unlist() %>%
str_replace_all(" ", "") #drop whitespace
search_matrix <- matrix(ncol = str_length(input_str_split[1]))
search-matrix
search_matrix
for (i in 1:length(test_str_split)){
row <- str_split_1(test_str_split[i],"")
search_matrix[1,] <- row
print(row)
}
for (i in 1:length(test_str_split)){
row <- str_split_1(test_str_split[i],"")
search_matrix[i,] <- row
print(row)
}
search_matrix <- matrix(ncol = str_length(input_str_split[1]))
for (i in 1:length(test_str_split)){
row <- str_split_1(test_str_split[i],"")
search_matrix <- rbind(search_matrix, row)
print(row)
}
search_matrix
search_matrix <- matrix(ncol = str_length(input_str_split[1]))
for (i in 1:length(test_str_split)){
row <- str_split_1(test_str_split[i],"")
search_matrix <- rbind(search_matrix, row)
print(row)
}
search_matrix
search_matrix <- as.data.frame(matrix(ncol = str_length(input_str_split[1])))
for (i in 1:length(test_str_split)){
row <- str_split_1(test_str_split[i],"")
search_matrix <- rbind(search_matrix, row)
# print(row)
}
search_matrix
i
i = 1
search_matrix <- as.data.frame(matrix(ncol = str_length(input_str_split[1])))
for (i in 1:length(input_str_split)){
row <- str_split_1(input_str_split[i],"")
search_matrix <- rbind(search_matrix, row)
# print(row)
}
search_matrix
input_str_split
length(input_str_split)
search_matrix <- as.data.frame(matrix(ncol = str_length(input_str_split[1])))
search_matrix
search_matrix <- as.data.frame(matrix(nrow = 0, ncol = str_length(input_str_split[1])))
for (i in 1:length(input_str_split)){
row <- str_split_1(input_str_split[i],"")
search_matrix <- rbind(search_matrix, row)
# print(row)
}
search_matrix
input_str_split <- strsplit(input_str, "\n") %>%
unlist() %>%
str_replace_all(" ", "") #drop whitespace
#Create a matrix with 1 letter in each row/column index
search_matrix <- as.data.frame(matrix(nrow = 0, ncol = str_length(input_str_split[1])))
for (i in 1:length(input_str_split)){
row <- str_split_1(input_str_split[i],"")
search_matrix <- rbind(search_matrix, row)
# print(row)
}
search_matrix
?which
sel_row <- search_matrix[j]
j = 1
sel_row <- search_matrix[j]
sel-row
sel_row
sel_row <- search_matrix[j,]
sel_row
search_matrix <- unname(search_matrix)
search_matrix #what's with the col names?
colnames(search_matrix) <- NULL
search_matrix #what's with the col names?
#Create a matrix with 1 letter in each row/column index
search_matrix <- as.data.frame(matrix(nrow = 0, ncol = str_length(input_str_split[1])))
for (i in 1:length(input_str_split)){
row <- str_split_1(input_str_split[i],"")
search_matrix <- rbind(search_matrix, row)
# print(row)
}
colnames(search_matrix) <- NULL
search_matrix
search_matrix[1,1]
sel_row <- search_matrix[j,]
sel_row
which(sel_row == "X")
sel_row[1]
k =1
k in 1:length(sel_row)
sel_letter <- sel_row[k]
sel-letter
sel_letter
for(j in 1:nrow(search_matrix)){
sel_row <- search_matrix[j,]
for(k in 1:length(sel_row)){
sel_letter <- sel_row[k]
print(sel_letter)
if(sel_letter != "X"){next}
print(paste0("Found an X!"))
}
}
sel_letter
sel_letter != "X"
sel_letter == "X"
sel_letter
class(sel_letter)
sel_letter <- as.character(sel_row[k])
print(sel_letter)
sel_letter == "X"
for(j in 1:nrow(search_matrix)){
sel_row <- search_matrix[j,]
for(k in 1:length(sel_row)){
sel_letter <- as.character(sel_row[k])
print(sel_letter)
if(sel_letter != "X"){next}
print(paste0("Found an X!"))
}
}
r
input_str_split <- strsplit(input_str, "\n") %>%
unlist() %>%
str_replace_all(" ", "") #drop whitespace
#Create a matrix with 1 letter in each row/column index
search_matrix <- as.data.frame(matrix(nrow = 0, ncol = str_length(input_str_split[1])))
for (i in 1:length(input_str_split)){
row <- str_split_1(input_str_split[i],"")
search_matrix <- rbind(search_matrix, row)
# print(row)
}
colnames(search_matrix) <- NULL
search_matrix
#Check for viable letter combinations
r = 1
c = 1
sel_row <- search_matrix[r,]
sel_letter <- as.character(sel_row[c])
print(sel_letter)
sel_letter
for(r in 1:nrow(search_matrix)){
sel_row <- search_matrix[r,]
for(c in 1:length(sel_row)){
sel_letter <- as.character(sel_row[c])
print(sel_letter)
if(sel_letter != "X"){next} #if not an X, move on
#print(paste0("Found an X!"))
# If an X is found, check surrounding letters for an M:
#surrounding letters:
# (r-1,c-1) (r-1,c) (r-1,c+1)
# (r,c-1)   X(r,c)  (r,c+1)
# (r+1,c-1) (r+1,c) (r+1,c+1)
# let's give them IDs
# 1 2 3
# 4 X 5
# 6 7 8
# surrounding_indices <- ###
}
}
for(r in 1:nrow(search_matrix)){
sel_row <- search_matrix[r,]
for(c in 1:length(sel_row)){
sel_letter <- as.character(sel_row[c])
print(sel_letter)
if(sel_letter != "X"){next} #if not an X, move on
#print(paste0("Found an X!"))
# If an X is found, check surrounding letters for an M:
print(paste0("(", r,",",c,")"))
#surrounding letters:
# (r-1,c-1) (r-1,c) (r-1,c+1)
# (r,c-1)   X(r,c)  (r,c+1)
# (r+1,c-1) (r+1,c) (r+1,c+1)
# let's give them IDs
# 1 2 3
# 4 X 5
# 6 7 8
# surrounding_indices <- ###
}
}
s1 <- search_matrix[r-1,c-1]
s1
s1 <- as.character(search_matrix[r-1,c-1])
s1
s1 <- as.character(search_matrix[r-1,c-1])
s2 <- as.character(search_matrix[r-1,c])
s3 <- as.character(search_matrix[r-1,c+1])
s4 <- as.character(search_matrix[r,c-1])
s5 <- as.character(search_matrix[r,c+1])
s6 <- as.character(search_matrix[r+1,c-1])
s7 <- as.character(search_matrix[r+1,c])
s8 <- as.character(search_matrix[r+1,c+1])
s1
s2
s3
s4
s5
s6
s7
s8
s9
list(s1, s2, s3, s4, s5, s6, s7, s8)
c(s1, s2, s3, s4, s5, s6, s7, s8)
?which
length(s1) > 0
length(8) > 0
s8
is.character(s8)
str_length(s8)
if(s1 == "M"){check_list <- c(check_list, "s1")}
check_list <- c()
if(s1 == "M"){check_list <- c(check_list, "s1")}
check_list
s1
s1 <- as.character(search_matrix[r-1,c-1])
if(s1 == "M"){check_list <- c(check_list, "s1")}
s2 <- as.character(search_matrix[r-1,c])
if(s2 == "M"){check_list <- c(check_list, "s2")}
s3 <- as.character(search_matrix[r-1,c+1])
if(s3 == "M"){check_list <- c(check_list, "s3")}
check_list
s3
